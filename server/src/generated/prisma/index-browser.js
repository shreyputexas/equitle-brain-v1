
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  firm: 'firm',
  role: 'role',
  phone: 'phone',
  location: 'location',
  avatar: 'avatar',
  emailVerified: 'emailVerified',
  isActive: 'isActive',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  bio: 'bio',
  joinDate: 'joinDate',
  timezone: 'timezone',
  language: 'language',
  theme: 'theme',
  notifications: 'notifications',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  emailNotify: 'emailNotify',
  pushNotify: 'pushNotify',
  smsNotify: 'smsNotify',
  calendarNotify: 'calendarNotify',
  dealNotify: 'dealNotify',
  autoSave: 'autoSave',
  darkMode: 'darkMode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IntegrationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  type: 'type',
  isActive: 'isActive',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt',
  scope: 'scope',
  profile: 'profile',
  settings: 'settings',
  lastSync: 'lastSync',
  syncStatus: 'syncStatus',
  errorMessage: 'errorMessage',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DealScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  company: 'company',
  description: 'description',
  sector: 'sector',
  stage: 'stage',
  status: 'status',
  value: 'value',
  probability: 'probability',
  leadPartner: 'leadPartner',
  team: 'team',
  tags: 'tags',
  priority: 'priority',
  targetClose: 'targetClose',
  actualClose: 'actualClose',
  nextStep: 'nextStep',
  lastActivity: 'lastActivity',
  source: 'source',
  geography: 'geography',
  dealSize: 'dealSize',
  metrics: 'metrics',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dealId: 'dealId',
  googleContactId: 'googleContactId',
  name: 'name',
  email: 'email',
  phone: 'phone',
  company: 'company',
  title: 'title',
  role: 'role',
  linkedinUrl: 'linkedinUrl',
  avatar: 'avatar',
  notes: 'notes',
  tags: 'tags',
  relationshipScore: 'relationshipScore',
  lastContact: 'lastContact',
  status: 'status',
  isKeyContact: 'isKeyContact',
  source: 'source',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dealId: 'dealId',
  contactId: 'contactId',
  type: 'type',
  title: 'title',
  description: 'description',
  content: 'content',
  date: 'date',
  duration: 'duration',
  location: 'location',
  attendees: 'attendees',
  status: 'status',
  priority: 'priority',
  outcome: 'outcome',
  nextSteps: 'nextSteps',
  metadata: 'metadata',
  externalId: 'externalId',
  syncedFrom: 'syncedFrom',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dealId: 'dealId',
  name: 'name',
  description: 'description',
  type: 'type',
  category: 'category',
  size: 'size',
  url: 'url',
  googleDriveId: 'googleDriveId',
  path: 'path',
  version: 'version',
  isConfidential: 'isConfidential',
  uploadedBy: 'uploadedBy',
  tags: 'tags',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommunicationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dealId: 'dealId',
  contactId: 'contactId',
  type: 'type',
  subject: 'subject',
  content: 'content',
  htmlContent: 'htmlContent',
  fromEmail: 'fromEmail',
  toEmails: 'toEmails',
  ccEmails: 'ccEmails',
  bccEmails: 'bccEmails',
  threadId: 'threadId',
  messageId: 'messageId',
  status: 'status',
  direction: 'direction',
  isRead: 'isRead',
  isImportant: 'isImportant',
  labels: 'labels',
  attachments: 'attachments',
  metadata: 'metadata',
  sentAt: 'sentAt',
  receivedAt: 'receivedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvestorScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  type: 'type',
  status: 'status',
  totalCommitment: 'totalCommitment',
  totalCalled: 'totalCalled',
  description: 'description',
  website: 'website',
  location: 'location',
  founded: 'founded',
  aum: 'aum',
  tags: 'tags',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FundScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  type: 'type',
  strategy: 'strategy',
  targetSize: 'targetSize',
  minimumCommitment: 'minimumCommitment',
  managementFee: 'managementFee',
  carriedInterest: 'carriedInterest',
  currency: 'currency',
  vintage: 'vintage',
  investmentPeriod: 'investmentPeriod',
  fundTerm: 'fundTerm',
  geoFocus: 'geoFocus',
  sectorFocus: 'sectorFocus',
  description: 'description',
  status: 'status',
  raisedAmount: 'raisedAmount',
  investorCount: 'investorCount',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvestorEntityScalarFieldEnum = {
  id: 'id',
  investorId: 'investorId',
  name: 'name',
  type: 'type',
  investmentType: 'investmentType',
  commitment: 'commitment',
  called: 'called',
  status: 'status',
  documents: 'documents',
  fundInvestments: 'fundInvestments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  type: 'type',
  format: 'format',
  content: 'content',
  data: 'data',
  url: 'url',
  status: 'status',
  recipients: 'recipients',
  sentAt: 'sentAt',
  generatedAt: 'generatedAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SyncJobScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  status: 'status',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  errorMessage: 'errorMessage',
  itemsProcessed: 'itemsProcessed',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeamsMessageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dealId: 'dealId',
  contactId: 'contactId',
  messageId: 'messageId',
  chatId: 'chatId',
  channelId: 'channelId',
  teamId: 'teamId',
  fromEmail: 'fromEmail',
  fromName: 'fromName',
  content: 'content',
  contentType: 'contentType',
  importance: 'importance',
  messageType: 'messageType',
  attachments: 'attachments',
  mentions: 'mentions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sentAt: 'sentAt'
};

exports.Prisma.TeamsChannelScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  channelId: 'channelId',
  teamId: 'teamId',
  name: 'name',
  description: 'description',
  type: 'type',
  webUrl: 'webUrl',
  memberCount: 'memberCount',
  isArchived: 'isArchived',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SlackMessageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dealId: 'dealId',
  contactId: 'contactId',
  messageId: 'messageId',
  channelId: 'channelId',
  channelName: 'channelName',
  fromUserId: 'fromUserId',
  fromName: 'fromName',
  text: 'text',
  messageType: 'messageType',
  threadTs: 'threadTs',
  attachments: 'attachments',
  reactions: 'reactions',
  mentions: 'mentions',
  sentAt: 'sentAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SlackChannelScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  channelId: 'channelId',
  name: 'name',
  purpose: 'purpose',
  topic: 'topic',
  isPrivate: 'isPrivate',
  isArchived: 'isArchived',
  memberCount: 'memberCount',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ZoomMeetingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dealId: 'dealId',
  meetingId: 'meetingId',
  uuid: 'uuid',
  topic: 'topic',
  agenda: 'agenda',
  startTime: 'startTime',
  duration: 'duration',
  timezone: 'timezone',
  status: 'status',
  meetingType: 'meetingType',
  joinUrl: 'joinUrl',
  startUrl: 'startUrl',
  password: 'password',
  hostEmail: 'hostEmail',
  participantCount: 'participantCount',
  hasRecording: 'hasRecording',
  recordingUrl: 'recordingUrl',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ZoomParticipantScalarFieldEnum = {
  id: 'id',
  meetingId: 'meetingId',
  userId: 'userId',
  zoomUserId: 'zoomUserId',
  name: 'name',
  email: 'email',
  joinTime: 'joinTime',
  leaveTime: 'leaveTime',
  duration: 'duration',
  status: 'status',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SalesforceAccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dealId: 'dealId',
  accountId: 'accountId',
  name: 'name',
  type: 'type',
  industry: 'industry',
  website: 'website',
  phone: 'phone',
  billingCity: 'billingCity',
  billingState: 'billingState',
  billingCountry: 'billingCountry',
  description: 'description',
  revenue: 'revenue',
  employees: 'employees',
  ownerId: 'ownerId',
  metadata: 'metadata',
  lastSync: 'lastSync',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SalesforceContactScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  contactId: 'contactId',
  accountId: 'accountId',
  name: 'name',
  email: 'email',
  phone: 'phone',
  title: 'title',
  department: 'department',
  leadSource: 'leadSource',
  description: 'description',
  ownerId: 'ownerId',
  metadata: 'metadata',
  lastSync: 'lastSync',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SalesforceOpportunityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dealId: 'dealId',
  opportunityId: 'opportunityId',
  accountId: 'accountId',
  name: 'name',
  amount: 'amount',
  stage: 'stage',
  probability: 'probability',
  closeDate: 'closeDate',
  type: 'type',
  leadSource: 'leadSource',
  description: 'description',
  ownerId: 'ownerId',
  metadata: 'metadata',
  lastSync: 'lastSync',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LPGroupScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  description: 'description',
  type: 'type',
  criteria: 'criteria',
  autoAssign: 'autoAssign',
  emailPreferences: 'emailPreferences',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvestorGroupMemberScalarFieldEnum = {
  id: 'id',
  investorId: 'investorId',
  groupId: 'groupId',
  assignedAt: 'assignedAt',
  autoAssigned: 'autoAssigned'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Profile: 'Profile',
  UserPreference: 'UserPreference',
  Integration: 'Integration',
  Deal: 'Deal',
  Contact: 'Contact',
  Activity: 'Activity',
  Document: 'Document',
  Communication: 'Communication',
  Investor: 'Investor',
  Fund: 'Fund',
  InvestorEntity: 'InvestorEntity',
  Report: 'Report',
  SyncJob: 'SyncJob',
  TeamsMessage: 'TeamsMessage',
  TeamsChannel: 'TeamsChannel',
  SlackMessage: 'SlackMessage',
  SlackChannel: 'SlackChannel',
  ZoomMeeting: 'ZoomMeeting',
  ZoomParticipant: 'ZoomParticipant',
  SalesforceAccount: 'SalesforceAccount',
  SalesforceContact: 'SalesforceContact',
  SalesforceOpportunity: 'SalesforceOpportunity',
  LPGroup: 'LPGroup',
  InvestorGroupMember: 'InvestorGroupMember'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
